{"version":3,"sources":["api/api.ts","components/Profile/ProfileInfo/ProfileInfo.module.css","components/NavBar/NavBar.module.css","components/Users/User/User.module.css","components/Friends/User/User.module.css","components/Header/Header.module.css","api/auth-api.ts","api/security-api.ts","redux/authReducer.ts","api/profile-api.ts","components/NavBar/FriendsSideBar/NavFriendItem/NavFriendItem.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/AvavatarProfile/AvavatarProfile.module.css","components/common/Paginator/Paginator.module.css","components/Profile/MyPosts/NewPost/NewPost.module.css","components/common/FormsControls/FormsControls.module.css","components/Dialogs/InputMessage/InputMessage.module.css","components/Dialogs/BlockDialogsItem/DialogItem/DialogsItem.module.css","components/Users/Users.module.css","components/Friends/Friends.module.css","components/NavBar/FriendsSideBar/FriendsSideBar.module.css","components/Profile/Profile.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Dialogs/Dialogs.module.css","components/Dialogs/BlockMessage/Message/Message.module.css","components/common/FormsControls/FormsControls.tsx","components/News/News.module.css","components/Music/Music.module.css","components/Setting/Setting.module.css","components/Users/User/PreloaderUsers/PreloaderUsers.module.css","components/Dialogs/BlockMessage/BlockMessage.module.css","components/Dialogs/BlockDialogsItem/BlockDialogsItem.module.css","components/common/Error404/Error404.module.css","components/Friends/User/PreloaderUsers/PreloaderUsers.module.css","reportWebVitals.js","redux/profileReducer.ts","api/users-api.ts","redux/sideBarReducer.ts","redux/dialogsReducer.ts","redux/usersReducer.ts","redux/appReducer.ts","redux/friendsReducer.ts","redux/reduxStore.ts","assets/images/user.png","components/NavBar/FriendsSideBar/NavFriendItem/NavFriendItem.tsx","components/NavBar/FriendsSideBar/FriendsSideBar.tsx","components/NavBar/FriendsSideBar/FriendsSideBarContainer.tsx","components/NavBar/NavBar.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Setting/Setting.tsx","components/common/Preloader/PreloaderButton/PreloaderButton.jsx","components/Users/User/User.tsx","components/common/Paginator/Paginator.tsx","utils/Validators/validator.ts","components/common/SearchForm/SearchForm.tsx","components/Users/Users.tsx","components/common/Preloader/Preloader.jsx","components/Users/User/PreloaderUsers/PreloaderUsers.tsx","redux/usersSelectors.ts","components/Users/UsersContainre.tsx","components/Profile/ProfileInfo/ProfileData.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/AvavatarProfile/AvatarProfile.tsx","components/Profile/ProfileInfo/StatusProfile/StatusProfileWithHook.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/NewPost/NewPost.tsx","components/Profile/MyPosts/NewPost/NewPostContainer.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","components/Header/HeaderComponent.tsx","components/Dialogs/InputMessage/InputMessage.tsx","components/Dialogs/BlockMessage/Message/Message.tsx","components/Dialogs/BlockMessage/BlockMessage.tsx","components/Dialogs/BlockDialogsItem/DialogItem/DialogsItem.tsx","components/Dialogs/BlockDialogsItem/BlockDialogsItem.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","hoc/withSuspense.tsx","assets/images/error_404.png","components/common/Error404/Error404.js","components/Friends/User/User.tsx","components/Friends/Friends.tsx","components/Friends/User/PreloaderUsers/PreloaderUsers.tsx","components/Friends/FriendsContainre.tsx","App.tsx","index.tsx"],"names":["ResultCodesEnum","ResultCodesForCaptchaEnum","instance","axios","create","baseURL","withCredentials","headers","module","exports","authAPI","get","then","response","data","email","password","rememberMe","captcha","post","delete","securityAPI","res","SET_USER_DATA","ADD_USER_PHOTO","ERROR_AUTH","SET_CAPTCHA_URL_SUCCESS","initialState","id","login","isFetching","isAuth","userPhoto","errorAuth","captchaURL","actions","type","payload","message","addUserPhoto","userId","dispatch","a","profileAPI","getUserProfile","photos","small","resultCode","Success","getAuthUser","CaptchaIsRequired","url","messages","logout","getState","meData","auth","authReducer","state","action","getStatus","updateStatus","status","put","updateAvatar","file","formData","FormData","append","updateProfileInfo","profile","Textarea","input","meta","props","hasError","error","touched","className","s","formControl","errorInput","Input","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ADD_POST","DELETE_POST","SET_USERS_PROFILE","TOGGLE_PRELOADER","SET_USER_STATUS","ADD_AVATAR","postData","likesCount","isPreloader","setUserProfile","setUserStatus","setPreloaderToggle","preloader","profileReducer","length","newPost","newPostText","filter","p","postId","usersAPI","currentPage","pageSize","friend","search","SET_SIDE_BAR_USERS","users","sideBarReducer","array","i","numberIsInArray","rand","Math","floor","random","j","push","console","log","ADD_MESSAGE","messageData","dialogsData","name","avatarUser","dialogsReducer","newMessage","FOLLOW","UNFOLLOW","SET_USERS","SET_USERS_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FOLLOWING_PROGRESS","usersData","totalUsersCount","followingInProgress","followSuccess","unfollowSuccess","setTotalUsersCount","toggleFollowingProgress","usersReducer","map","u","followed","numberPage","INITIALIZED_SUCCESS","initialized","appReducer","friendsReducer","rootReducers","combineReducers","app","store","createStore","applyMiddleware","thunk","window","NavFriend","friendItem","src","userNull","alt","to","friendItemPreloader","FriendsSideBar","nameUserElement","user","buttonFriends","blockFriends","FriendsSideBarContainer","connect","NavBar","nav","item","item_first","activeClassName","active","item_setting","News","news","Music","music","Setting","setting","PreloaderButton","User","avatarBlock","large","authorizedUserId","disabled","some","onClick","unfollow","buttonFollow","follow","profileUser","aboutUser","nameUser","bio","blockCountry","countyUser","cityUser","Paginator","portionSize","pagesCount","ceil","totalItemsCount","pages","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","buttonChangeList","onPageChanged","numbersPage","selectedPage","required","value","SearchForm","initialValues","term","validate","values","onSubmit","isSubmitting","placeholder","Users","wrapper","onChange","e","target","selectPage","optionPage","Preloader","style","height","width","borderWidth","PreloaderUser","UserAPIComponent","setUsersCurrentPage","getUsers","this","PreloaderUsers","React","Component","UserContainer","items","totalCount","ProfileData","isOwner","changeInfoButton","editButton","aboutMe","lookingForAJob","lookingForAJobDescription","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","ProfileDataForm","isChecked","setIsChecked","fullName","changeProfile","render","handleSubmit","component","initialValue","form","checkbox","checked","check","AvatarProfile","avatar","photo","blockInput","files","addChangeAvatar","inputPhoto","htmlFor","fakeInputPhoto","blockFakeInputPhoto","icon","faUserEdit","iconFakeInputPhoto","StatusProfileWithHook","editMode","setEditMode","setStatus","useEffect","autoFocus","updateUserStatus","onDoubleClick","ProfileInfo","profile_logo","descriptions","descriptions_logo","descriptions_text","descriptions_name","descriptions_about","Post","post_content","post_logo","post_text","deletePost","post_like","post_likes","likes","AddNewPost","composeValidators","validators","reduce","validator","undefined","addPost","inputNewPost","newPost_textarea","maxLength","hasValidationErrors","newPost_button","NewPost","NewPostContainer","MyPosts","postsElement","posts","posts_title","MyPostMemorized","memo","Profile","preloaderBox","ProfileContainerAPI","match","params","history","getUserStatus","refreshProfile","prevProps","Number","ProfileContainer","compose","withRouter","Header","header","header_logo","loginBlock","blockPhoto","photoNull","buttonLogout","HeaderComponent","AddMessageForm","addNewMessage","textAreaMessage","inputMessage","textMessage","buttonSend","buttonImg","InputMessage","Message","messageInto","BlockMessage","messageElement","blockMessage","DialogItem","path","dialog","BlockDialogsItem","dialogElement","dialogs_items","Dialogs","dialogs","mapStateToProps","withAuthRedirect","restProps","DialogsContainer","WithSuspense","Suspense","fallback","Error404","error404","imagesError","Friends","FriendsContainer","Login","lazy","App","initializeApp","initialize","exact","promise","promiseSideBar","Promise","all","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.beddd835.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport {UserType} from \"../Types/types\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '3588cd03-a8ff-4f0d-9d81-9d9c39c14fdb'\r\n    }\r\n})\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n\r\nexport enum ResultCodesEnum  {\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\n\r\nexport enum ResultCodesForCaptchaEnum  {\r\n    Success = 0,\r\n    Error = 1,\r\n    CaptchaIsRequired = 10,\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile_logo\":\"ProfileInfo_profile_logo__1gGmI\",\"descriptions\":\"ProfileInfo_descriptions__3FOxw\",\"descriptions_logo\":\"ProfileInfo_descriptions_logo__v86Dv\",\"descriptions_text\":\"ProfileInfo_descriptions_text__1Bk_o\",\"descriptions_name\":\"ProfileInfo_descriptions_name__22uMQ\",\"descriptions_about\":\"ProfileInfo_descriptions_about__7Fcjm\",\"contacts\":\"ProfileInfo_contacts__2uQFH\",\"editButton\":\"ProfileInfo_editButton__pSVk-\",\"form\":\"ProfileInfo_form__3xfph\",\"checkbox\":\"ProfileInfo_checkbox__1mNzV\",\"wrapper\":\"ProfileInfo_wrapper__uBebX\",\"check\":\"ProfileInfo_check__2cAY0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"NavBar_nav__1ZsFP\",\"item_first\":\"NavBar_item_first__MOfNm\",\"item\":\"NavBar_item__2oFxI\",\"active\":\"NavBar_active__1EKNC\",\"item_setting\":\"NavBar_item_setting__3YL6_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user\":\"User_user__10vDW\",\"avatarBlock\":\"User_avatarBlock__12Mle\",\"avatarUser\":\"User_avatarUser__1CpwV\",\"buttonFollow\":\"User_buttonFollow__1CNQl\",\"profileUser\":\"User_profileUser__1tSXC\",\"aboutUser\":\"User_aboutUser__1t7mg\",\"nameUser\":\"User_nameUser__2Op41\",\"blockCountry\":\"User_blockCountry__jcTk-\",\"countyUser\":\"User_countyUser__3341w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user\":\"User_user__3ipR4\",\"avatarBlock\":\"User_avatarBlock__UNvSu\",\"avatarUser\":\"User_avatarUser__29V9V\",\"buttonFollow\":\"User_buttonFollow__28z0T\",\"profileUser\":\"User_profileUser__1aANy\",\"aboutUser\":\"User_aboutUser__YUmPQ\",\"nameUser\":\"User_nameUser__21eP7\",\"blockCountry\":\"User_blockCountry__3AHUa\",\"countyUser\":\"User_countyUser__GYjNJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1GvhD\",\"header_logo\":\"Header_header_logo__-GRmH\",\"loginBlock\":\"Header_loginBlock__2MFl8\",\"blockPhoto\":\"Header_blockPhoto__2jnVz\",\"photo\":\"Header_photo__63AOT\",\"photoNull\":\"Header_photoNull__19x9a\",\"active\":\"Header_active__SB70v\",\"buttonLogout\":\"Header_buttonLogout__2dCym\"};","import {instance, APIResponseType, ResultCodesForCaptchaEnum} from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\ntype LoginResponseType = {\r\n    userId: number\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>('auth/me').then(response => response.data)\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance.post<APIResponseType<LoginResponseType, ResultCodesForCaptchaEnum>>('auth/login', {\r\n            email, password, rememberMe, captcha\r\n        }).then(response => response.data)\r\n    },\r\n    logout() {\r\n        return instance.delete<APIResponseType>('auth/login')\r\n    }\r\n}","import {instance} from \"./api\";\r\n\r\ntype GetCaptchaURLResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    captchaURL() {\r\n        return instance.get<GetCaptchaURLResponseType>('/security/get-captcha-url').then(res => res.data)\r\n    }\r\n\r\n}","import {ResultCodesEnum, ResultCodesForCaptchaEnum} from \"../api/api\";\r\nimport {profileAPI} from \"../api/profile-api\";\r\nimport {authAPI} from \"../api/auth-api\";\r\nimport {securityAPI} from \"../api/security-api\";\r\nimport {BaseThunkType, InferActionTypes} from \"./reduxStore\";\r\nimport {getSideBarUsers} from \"./sideBarReducer\";\r\n\r\nconst SET_USER_DATA = 'ruslnetwork/authReducer/SET_USER_DATA';\r\nconst ADD_USER_PHOTO = 'ruslnetwork/authReducer/ADD_USER_PHOTO';\r\nconst ERROR_AUTH = 'ruslnetwork/authReducer/ERROR_AUTH';\r\nconst SET_CAPTCHA_URL_SUCCESS = 'ruslnetwork/authReducer/SET_CAPTCHA_URL_SUCCESS';\r\n\r\n\r\nexport type InitialStateType = {\r\n    id: null | number,\r\n    login: null | string,\r\n    email: null | string,\r\n    isFetching: boolean,\r\n    isAuth: boolean,\r\n    userPhoto: null | string,\r\n    errorAuth: null | string,\r\n    captchaURL: null | string\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    id: null,\r\n    login: null,\r\n    email: null,\r\n    isFetching: false,\r\n    isAuth: false,\r\n    userPhoto: '',\r\n    errorAuth: null,\r\n    captchaURL: null\r\n}\r\n\r\nexport type ActionsType = InferActionTypes<typeof actions>\r\n\r\ntype ThunkType = BaseThunkType<ActionsType>\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        case ADD_USER_PHOTO:\r\n            return {\r\n                ...state,\r\n                userPhoto: action.userPhoto,\r\n            }\r\n        case ERROR_AUTH:\r\n            return {\r\n                ...state,\r\n                errorAuth: action.message,\r\n            }\r\n        case SET_CAPTCHA_URL_SUCCESS:\r\n            return {\r\n                ...state,\r\n                captchaURL: action.captchaURL,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setAuthUserData: (id: number | null, login: string | null, email: string | null, isAuth: boolean) => ({\r\n        type: SET_USER_DATA,\r\n        payload: {id, login, email, isAuth}\r\n    } as const),\r\n    addUserPhotoSuccess: (userPhoto: string | null) => ({\r\n        type: ADD_USER_PHOTO,\r\n        userPhoto,\r\n    } as const),\r\n    errorAuth: (message: string) => ({\r\n        type: ERROR_AUTH,\r\n        message,\r\n    } as const),\r\n    setCaptchaURLSuccess: (captchaURL: string | null) => ({\r\n            type: SET_CAPTCHA_URL_SUCCESS,\r\n            captchaURL\r\n    } as const)\r\n}\r\n\r\n\r\nexport const addUserPhoto = (userId: number | null): ThunkType => {\r\n    return async (dispatch) => {\r\n        const data = await profileAPI.getUserProfile(userId)\r\n        dispatch(actions.addUserPhotoSuccess(data.photos.small))\r\n    }\r\n}\r\n\r\n\r\nconst setCaptchaURL = (): ThunkType => {\r\n    return async (dispatch) => {\r\n        debugger\r\n        const data = await securityAPI.captchaURL()\r\n        dispatch(actions.setCaptchaURLSuccess(data.url))\r\n    }\r\n}\r\n\r\nexport const login = (email: any, password: any, rememberMe: any, captcha: any): ThunkType => {\r\n    return async (dispatch) => {\r\n        const data = await authAPI.login(email, password, rememberMe, captcha)\r\n        if (data.resultCode === ResultCodesForCaptchaEnum.Success) {\r\n            dispatch(getAuthUser())\r\n            dispatch(actions.errorAuth(''))\r\n        } else {\r\n            if (data.resultCode === ResultCodesForCaptchaEnum.CaptchaIsRequired) {\r\n                dispatch(setCaptchaURL())\r\n            }\r\n            dispatch(actions.errorAuth(data.messages[0]))\r\n        }\r\n        dispatch(actions.setCaptchaURLSuccess(null))\r\n    }\r\n}\r\n\r\nexport const logout = (): ThunkType => {\r\n    return async (dispatch) => {\r\n        const response = await authAPI.logout()\r\n        if (response.data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(actions.setAuthUserData(null, null, null, false))\r\n        }\r\n    }\r\n}\r\n\r\nexport const getAuthUser = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const meData = await authAPI.me()\r\n        if (meData.resultCode === 0) {\r\n            dispatch(actions.setAuthUserData(meData.data.id, meData.data.login, meData.data.email, true))\r\n        }\r\n        await dispatch(addUserPhoto(getState().auth.id))\r\n    }\r\n}\r\n\r\nexport default authReducer;\r\n","import {instance, APIResponseType, ResultCodesEnum} from \"./api\";\r\nimport {PhotosType, ProfileType} from \"../Types/types\";\r\n\r\ntype UpdateAvatarType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getUserProfile(userId: number | null) {\r\n        return instance.get<ProfileType>(`profile/` + userId).then(res => res.data)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/` + userId).then(res => res.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status`, {\r\n            status: status,\r\n        }).then(res => res.data)\r\n    },\r\n    updateAvatar(file: File) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", file);\r\n        return instance.put<APIResponseType<UpdateAvatarType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                \"Content-Type\": \"multipart/form-data\",\r\n            }\r\n        }).then(res => res.data)\r\n    },\r\n    updateProfileInfo(profile: any) {\r\n        return instance.put<APIResponseType>('profile', profile)\r\n    }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friendItem\":\"NavFriendItem_friendItem__3tREF\",\"friendItemPreloader\":\"NavFriendItem_friendItemPreloader__3GrP3\",\"avatarUser\":\"NavFriendItem_avatarUser__2Q4fg\",\"name\":\"NavFriendItem_name__2_AbB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__1cgbX\",\"post_content\":\"Post_post_content__22nR6\",\"post_logo\":\"Post_post_logo__3iji_\",\"post_text\":\"Post_post_text__1m5Mt\",\"post_like\":\"Post_post_like__NnLKi\",\"post_likes\":\"Post_post_likes__ZRgdt\",\"delete\":\"Post_delete__3n7Q5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"AvavatarProfile_avatar__17d2M\",\"inputPhoto\":\"AvavatarProfile_inputPhoto__3bOgk\",\"blockInput\":\"AvavatarProfile_blockInput__3TjVq\",\"blockFakeInputPhoto\":\"AvavatarProfile_blockFakeInputPhoto__2mf4v\",\"iconFakeInputPhoto\":\"AvavatarProfile_iconFakeInputPhoto__1bFek\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonChangeList\":\"Paginator_buttonChangeList__2Pcro\",\"numbersPage\":\"Paginator_numbersPage__2dMmH\",\"selectedPage\":\"Paginator_selectedPage__3N0Wc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newPost\":\"NewPost_newPost__gckab\",\"newPost_textarea\":\"NewPost_newPost_textarea__2Eb51\",\"newPost_button\":\"NewPost_newPost_button__3EsHI\",\"disabled\":\"NewPost_disabled__3z2-l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1eqP1\",\"errorInput\":\"FormsControls_errorInput__Filto\",\"errorTextarea\":\"FormsControls_errorTextarea__stxTP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputMessage\":\"InputMessage_inputMessage__lnSYt\",\"textMessage\":\"InputMessage_textMessage__2TeLS\",\"buttonSend\":\"InputMessage_buttonSend__3RzUJ\",\"buttonImg\":\"InputMessage_buttonImg__PPXw-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogsItem_dialog__1uTuI\",\"active\":\"DialogsItem_active__1jgbh\",\"avatarUser\":\"DialogsItem_avatarUser__3Dwfb\",\"nameUser\":\"DialogsItem_nameUser__1JDz-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Users_wrapper__2IDO-\",\"selectPage\":\"Users_selectPage__3xoGZ\",\"optionPage\":\"Users_optionPage__ikGdl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Friends_wrapper__1SDZh\",\"selectPage\":\"Friends_selectPage__yT6LD\",\"optionPage\":\"Friends_optionPage__3y38L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blockFriends\":\"FriendsSideBar_blockFriends__2iMJn\",\"buttonFriends\":\"FriendsSideBar_buttonFriends__1IB2K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__13nXA\",\"preloaderBox\":\"Profile_preloaderBox__s-cO5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__223X8\",\"posts_title\":\"MyPosts_posts_title__3tsFr\",\"newPost\":\"MyPosts_newPost__1RZDe\",\"newPost_textarea\":\"MyPosts_newPost_textarea__2G1bL\",\"newPost_button\":\"MyPosts_newPost_button__DKrux\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1qLjX\",\"dialogs_items\":\"Dialogs_dialogs_items__3JY44\",\"messages\":\"Dialogs_messages__1yubI\",\"blockMessage\":\"Dialogs_blockMessage__1tLBT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__16buQ\",\"messageInto\":\"Message_messageInto__dBjVq\"};","import React from 'react'\r\nimport s from './FormsControls.module.css'\r\n\r\nexport const Textarea = ({input, meta, ...props}: any) => {\r\n    const hasError = meta.error && meta.touched;\r\n    return (\r\n        <div className={`${s.formControl} ${hasError && s.errorInput}`}>\r\n            <textarea {...input} {...props}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Input = ({input, meta, ...props}: any) => {\r\n\r\n    const hasError = meta.error && meta.touched;\r\n    return (\r\n        <div className={`${s.formControl} ${hasError && s.errorInput}`}>\r\n            <input {...input} {...props}/>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"news\":\"News_news__3SN8l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"music\":\"Music_music__SNPKr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"setting\":\"Setting_setting__3dyKB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"PreloaderUsers_wrapper__1HebR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blockMessage\":\"BlockMessage_blockMessage__Ql4Pd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs_items\":\"BlockDialogsItem_dialogs_items__1Ilm8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"imagesError\":\"Error404_imagesError__3CKE0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"PreloaderUsers_wrapper__2RXx2\"};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {ResultCodesEnum} from \"../api/api\";\r\nimport {addUserPhoto} from \"./authReducer\";\r\nimport {PhotosType, PostDataType, ProfileType} from \"../Types/types\";\r\nimport {profileAPI} from \"../api/profile-api\";\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst DELETE_POST = 'DELETE_POST';\r\nconst SET_USERS_PROFILE = 'SET_USERS_PROFILE';\r\nconst TOGGLE_PRELOADER = 'TOGGLE_PRELOADER';\r\nconst SET_USER_STATUS = 'SET_USER_STATUS';\r\nconst ADD_AVATAR = 'ADD_AVATAR';\r\n\r\n\r\nlet initialState = {\r\n    postData: [\r\n        {id: 1, message: 'Hi, How are you?', likesCount: 189},\r\n        {id: 2, message: 'I\\'m Happy', likesCount: 95},\r\n    ] as Array<PostDataType>,\r\n    profile: null as ProfileType | null,\r\n    isPreloader: false,\r\n    status: '',\r\n};\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst profileReducer = (state = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            let id = state.postData[state.postData.length - 1].id\r\n            let newPost = {\r\n                id: id + 1,\r\n                message: action.newPostText,\r\n                likesCount: 0,\r\n            };\r\n            return {\r\n                ...state,\r\n                postData: [...state.postData, newPost],\r\n            };\r\n        case DELETE_POST:\r\n            return {\r\n                ...state,\r\n                postData: state.postData.filter(p => p.id != action.postId)\r\n            }\r\n        case SET_USERS_PROFILE:\r\n            return {...state, profile: action.profile}\r\n        case TOGGLE_PRELOADER:\r\n            return {...state, isPreloader: action.preloader}\r\n        case SET_USER_STATUS:\r\n            return {...state, status: action.status}\r\n        case ADD_AVATAR:\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos} as ProfileType\r\n            }\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\n\r\ntype AddPostActionType = {\r\n    type: typeof ADD_POST,\r\n    newPostText: string\r\n}\r\n\r\nexport const addPost = (newPostText: string): AddPostActionType => {\r\n    return {\r\n        type: ADD_POST,\r\n        newPostText\r\n    }\r\n}\r\n\r\ntype DeletePostActionType = {\r\n    type: typeof DELETE_POST,\r\n    postId: number\r\n}\r\n\r\nexport const deletePost = (postId: number): DeletePostActionType => {\r\n    return {\r\n        type: DELETE_POST,\r\n        postId\r\n    }\r\n}\r\n\r\ntype SetUserProfileActionType = {\r\n    type: typeof SET_USERS_PROFILE,\r\n    profile: ProfileType | null\r\n}\r\n\r\nexport const setUserProfile = (profile: ProfileType | null): SetUserProfileActionType => {\r\n    return {\r\n        type: SET_USERS_PROFILE,\r\n        profile\r\n    }\r\n}\r\n\r\ntype SetUserStatusActionType = {\r\n    type: typeof SET_USER_STATUS,\r\n    status: string\r\n}\r\n\r\nexport const setUserStatus = (status: string): SetUserStatusActionType => {\r\n    return {\r\n        type: SET_USER_STATUS,\r\n        status\r\n    }\r\n}\r\n\r\ntype SetPreloaderToggleActionType = {\r\n    type: typeof TOGGLE_PRELOADER\r\n    preloader: boolean\r\n}\r\n\r\nexport const setPreloaderToggle = (preloader: boolean): SetPreloaderToggleActionType => ({\r\n    type: TOGGLE_PRELOADER,\r\n    preloader\r\n})\r\n\r\n\r\ntype AddAvatarSuccessActionType = {\r\n    type: typeof ADD_AVATAR\r\n    photos: PhotosType\r\n}\r\n\r\nconst addAvatarSuccess = (photos: PhotosType): AddAvatarSuccessActionType => {\r\n    return {\r\n        type: ADD_AVATAR,\r\n        photos\r\n    }\r\n}\r\n\r\nexport const getUserProfile = (userId: number) => {\r\n    return async (dispatch: any) => {\r\n        dispatch(setUserProfile(null))\r\n        dispatch(setPreloaderToggle(true))\r\n        try {\r\n            const data = await profileAPI.getUserProfile(userId)\r\n            dispatch(setPreloaderToggle(false))\r\n            dispatch(setUserProfile(data))\r\n        } catch (error) {\r\n            // dispatch(setUserProfile(error.message))\r\n            // dispatch(setPreloaderToggle(false))\r\n        }\r\n    }\r\n}\r\n\r\nexport const getUserStatus = (userId: number) => {\r\n    return async (dispatch: any) => {\r\n        const data = await profileAPI.getStatus(userId)\r\n        dispatch(setUserStatus(data))\r\n    }\r\n}\r\n\r\nexport const updateUserStatus = (status: string) => {\r\n    return async (dispatch: any) => {\r\n        const data = await profileAPI.updateStatus(status)\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(setUserStatus(status))\r\n        }\r\n    }\r\n}\r\n\r\nexport const addChangeAvatar = (file: File) => {\r\n    return async (dispatch: any, getState: any) => {\r\n        let data = await profileAPI.updateAvatar(file)\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(addAvatarSuccess(data.data.photos))\r\n        }\r\n        dispatch(addUserPhoto(getState().auth.id))\r\n    }\r\n}\r\n\r\nexport const changeProfile = (profile: any) => {\r\n    return async (dispatch: any, getState: any) => {\r\n        const userId = getState().auth.id\r\n        let response = await profileAPI.updateProfileInfo(profile)\r\n        if (response.data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(getUserProfile(userId))\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default profileReducer;","import {GetItemsType, instance, APIResponseType} from \"./api\"\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10, friend: boolean | null, search: string) {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&friend=${friend}&term=${search}`)\r\n            .then(response => response.data)\r\n    },\r\n    follow(id: number) {\r\n        return instance.post<APIResponseType<{}>>('follow/' + id)\r\n            .then(res => res.data)\r\n    },\r\n    unfollow(id: number) {\r\n        return instance.delete<APIResponseType<{}>>('follow/' + id)\r\n            .then(res => res.data)\r\n    },\r\n}\r\n","import {usersAPI} from \"../api/users-api\"\r\nimport {UserType} from \"../Types/types\";\r\n\r\nconst SET_SIDE_BAR_USERS = 'SET_SIDE_BAR_USERS'\r\n\r\n\r\ntype InitialStateType = {\r\n    users: Array<UserType>\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    users: [],\r\n}\r\n\r\nconst sideBarReducer = (state = initialState, action: SetSideBarUsersActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_SIDE_BAR_USERS:\r\n            var array: Array<number> = [];\r\n            for(var i = 0; i < 3; i++) {\r\n                var numberIsInArray = false;\r\n                var rand = Math.floor(Math.random()*action.users.length)\r\n                for(var j = 0; j < array.length; j++){\r\n                    if(rand === array[j]) {\r\n                        numberIsInArray = true;\r\n                        i--;\r\n                    }\r\n                }\r\n                if(!numberIsInArray){\r\n                    array.push(rand);\r\n                }\r\n            }\r\n            console.log(array)\r\n            return {\r\n                ...state,\r\n                users: [action.users[array[0]],\r\n                    action.users[array[1]],\r\n                    action.users[array[2]]]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype SetSideBarUsersActionType = {\r\n    type: typeof SET_SIDE_BAR_USERS,\r\n    users: Array<UserType>\r\n}\r\n\r\nlet setSideBarUsers = (users: Array<UserType>): SetSideBarUsersActionType => {\r\n    return {\r\n        type: SET_SIDE_BAR_USERS,\r\n        users\r\n    }\r\n}\r\n\r\nexport const getSideBarUsers = () => {\r\n    return async (dispatch: any) => {\r\n        let data = await usersAPI.getUsers(1, 20, true, '')\r\n        dispatch(setSideBarUsers(data.items))\r\n    }\r\n}\r\n\r\nexport default sideBarReducer;","import {DialogType, MessageType} from \"../Types/types\";\r\n\r\nconst ADD_MESSAGE = 'ADD-NEW-MESSAGE'\r\n\r\nlet initialState = {\r\n    messageData: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How are you?'},\r\n        {id: 3, message: 'Bye'},\r\n    ] as Array<MessageType>,\r\n\r\n    dialogsData: [\r\n        {\r\n            id: 1,\r\n            name: 'Sun',\r\n            avatarUser: 'https://solarsystem.nasa.gov/system/basic_html_elements/11561_Sun.png'\r\n        },\r\n        {\r\n            id: 2,\r\n            name: 'Teacher',\r\n            avatarUser: 'https://ikeacity.by/UserFiles/products/images2/large/903/684/47/doska-molbert-ikea-mola-0.jpg'\r\n        },\r\n        {\r\n            id: 3,\r\n            name: 'Nikitka',\r\n            avatarUser: 'https://www.meme-arsenal.com/memes/5608fd17a92284aa78fdf6ec089a3c97.jpg'\r\n        },\r\n    ] as Array<DialogType>,\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE:\r\n            let newMessage = {\r\n                id: 1,\r\n                message: action.message,\r\n            }\r\n            return {\r\n                ...state,\r\n                messageData: [...state.messageData, newMessage],\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionTypes = AddNewMessageType\r\n\r\ntype AddNewMessageType = {\r\n    type: typeof ADD_MESSAGE,\r\n    message: string\r\n}\r\n\r\nexport const addNewMessage = (message: string): AddNewMessageType => {\r\n    return {\r\n        type: ADD_MESSAGE,\r\n        message\r\n    }\r\n}\r\n\r\nexport default dialogsReducer;\r\n","import {usersAPI} from \"../api/users-api\";\r\nimport {UserType} from \"../Types/types\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType, BaseThunkType} from \"./reduxStore\";\r\nimport {ResultCodesEnum} from \"../api/api\";\r\n\r\nconst FOLLOW = 'ruslnetwork/usersReducer/FOLLOW';\r\nconst UNFOLLOW = 'ruslnetwork/usersReducer/UNFOLLOW';\r\nconst SET_USERS = 'ruslnetwork/usersReducer/SET-USERS';\r\nconst SET_USERS_CURRENT_PAGE = 'ruslnetwork/usersReducer/SET_USERS_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'ruslnetwork/usersReducer/SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_PRELOADER = 'ruslnetwork/usersReducer/TOGGLE_PRELOADER';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'ruslnetwork/usersReducer/TOGGLE_IS_FOLLOWING_PROGRESS';\r\n\r\n\r\nlet initialState = {\r\n    usersData: [] as Array<UserType>,\r\n    pageSize: 20,\r\n    totalUsersCount: 11,\r\n    currentPage: 1,\r\n    isPreloader: true,\r\n    followingInProgress: [] as Array<number>, // array of users id\r\n};\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                usersData: state.usersData.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                usersData: state.usersData.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {...state, usersData: [...action.users]}\r\n        case SET_USERS_CURRENT_PAGE:\r\n            return {...state, currentPage: +action.numberPage}\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n        case TOGGLE_PRELOADER:\r\n            return {...state, isPreloader: action.preloader}\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.preloader ?\r\n                    [...state.followingInProgress, action.userId] :\r\n                    state.followingInProgress.filter(id => id != action.userId),\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionsType = FollowSuccessActionType\r\n    | UnfollowSuccessActionType\r\n    | SetUsersActionType\r\n    | SetUsersCurrentPageActionType\r\n    | SetTotalUsersCountActionType\r\n    | SetPreloaderToggleActionType\r\n    | ToggleFollowingProgressActionType\r\n\r\ntype ThunkType = BaseThunkType<ActionsType>\r\n\r\ntype FollowSuccessActionType = {\r\n    type: typeof FOLLOW\r\n    userId: number\r\n}\r\n\r\nexport const followSuccess = (userId: number): FollowSuccessActionType => ({type: FOLLOW, userId})\r\n\r\ntype UnfollowSuccessActionType = {\r\n    type: typeof UNFOLLOW\r\n    userId: number\r\n}\r\n\r\nexport const unfollowSuccess = (userId: number): UnfollowSuccessActionType => ({type: UNFOLLOW, userId})\r\n\r\ntype SetUsersActionType = {\r\n    type: typeof SET_USERS\r\n    users: Array<UserType>\r\n}\r\n\r\nexport const setUsers = (users: Array<UserType>): SetUsersActionType => ({type: SET_USERS, users})\r\n\r\ntype SetUsersCurrentPageActionType = {\r\n    type: typeof SET_USERS_CURRENT_PAGE\r\n    numberPage: number\r\n}\r\n\r\nexport const setUsersCurrentPage = (numberPage: number): SetUsersCurrentPageActionType => ({\r\n    type: SET_USERS_CURRENT_PAGE,\r\n    numberPage\r\n})\r\n\r\ntype SetTotalUsersCountActionType = {\r\n    type: typeof SET_TOTAL_USERS_COUNT,\r\n    totalUsersCount: number\r\n}\r\n\r\nexport const setTotalUsersCount = (totalUsersCount: number): SetTotalUsersCountActionType => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    totalUsersCount\r\n})\r\n\r\ntype SetPreloaderToggleActionType = {\r\n    type: typeof TOGGLE_PRELOADER,\r\n    preloader: boolean\r\n}\r\n\r\nexport const setPreloaderToggle = (preloader: boolean): SetPreloaderToggleActionType => ({\r\n    type: TOGGLE_PRELOADER,\r\n    preloader\r\n})\r\n\r\ntype ToggleFollowingProgressActionType = {\r\n    type: typeof TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    preloader: boolean,\r\n    userId: number\r\n}\r\n\r\nexport const toggleFollowingProgress = (preloader: boolean, userId: number): ToggleFollowingProgressActionType => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    preloader,\r\n    userId\r\n})\r\n\r\n\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(setPreloaderToggle(true))\r\n        let data = await usersAPI.getUsers(currentPage, pageSize, null, '')\r\n        dispatch(setPreloaderToggle(false))\r\n        dispatch(setUsers(data.items))\r\n        dispatch(setTotalUsersCount(data.totalCount))\r\n    }\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleFollowingProgress(true, userId))\r\n        let data = await usersAPI.follow(userId)\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(followSuccess(userId))\r\n        }\r\n        dispatch(toggleFollowingProgress(false, userId))\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleFollowingProgress(true, userId))\r\n        let data = await usersAPI.unfollow(userId)\r\n        if (data.resultCode === 0) {\r\n            dispatch(unfollowSuccess(userId))\r\n        }\r\n        dispatch(toggleFollowingProgress(false, userId))\r\n    }\r\n}\r\n\r\nexport default usersReducer;\r\n","import {getAuthUser} from \"./authReducer\";\r\nimport {getSideBarUsers} from \"./sideBarReducer\";\r\nimport {InferActionTypes} from \"./reduxStore\";\r\n\r\nconst INITIALIZED_SUCCESS = 'ruslnetwork/appReducer/INITIALIZED_SUCCESS';\r\n\r\nexport type InitialStateType = {\r\n    initialized: boolean\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    initialized: false,\r\n}\r\n\r\nexport type ActionType = InferActionTypes<typeof actions>\r\n\r\nconst appReducer = (state = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: INITIALIZED_SUCCESS})\r\n}\r\n\r\n\r\nexport const initializeApp = () => {\r\n    return (dispatch: any) => {\r\n       let promise = dispatch(getAuthUser());\r\n       let promiseSideBar = dispatch(getSideBarUsers())\r\n        Promise.all([promise, promiseSideBar]).then(() => {\r\n            dispatch(actions.initializedSuccess());\r\n\r\n        })\r\n    }\r\n}\r\n\r\nexport default appReducer;\r\n","import {usersAPI} from \"../api/users-api\";\r\nimport {UserType} from \"../Types/types\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType, BaseThunkType} from \"./reduxStore\";\r\nimport {ResultCodesEnum} from \"../api/api\";\r\n\r\nconst FOLLOW = 'ruslnetwork/usersReducer/FOLLOW';\r\nconst UNFOLLOW = 'ruslnetwork/usersReducer/UNFOLLOW';\r\nconst SET_USERS = 'ruslnetwork/usersReducer/SET-USERS';\r\nconst SET_USERS_CURRENT_PAGE = 'ruslnetwork/usersReducer/SET_USERS_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'ruslnetwork/usersReducer/SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_PRELOADER = 'ruslnetwork/usersReducer/TOGGLE_PRELOADER';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'ruslnetwork/usersReducer/TOGGLE_IS_FOLLOWING_PROGRESS';\r\n\r\n\r\nlet initialState = {\r\n    usersData: [] as Array<UserType>,\r\n    pageSize: 20,\r\n    totalUsersCount: 11,\r\n    currentPage: 1,\r\n    isPreloader: true,\r\n    followingInProgress: [] as Array<number>, // array of users id\r\n};\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst friendsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                usersData: state.usersData.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                usersData: state.usersData.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {...state, usersData: [...action.users]}\r\n        case SET_USERS_CURRENT_PAGE:\r\n            return {...state, currentPage: +action.numberPage}\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n        case TOGGLE_PRELOADER:\r\n            return {...state, isPreloader: action.preloader}\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.preloader ?\r\n                    [...state.followingInProgress, action.userId] :\r\n                    state.followingInProgress.filter(id => id != action.userId),\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionsType = FollowSuccessActionType\r\n    | UnfollowSuccessActionType\r\n    | SetUsersActionType\r\n    | SetUsersCurrentPageActionType\r\n    | SetTotalUsersCountActionType\r\n    | SetPreloaderToggleActionType\r\n    | ToggleFollowingProgressActionType\r\n\r\ntype ThunkType = BaseThunkType<ActionsType>\r\n\r\ntype FollowSuccessActionType = {\r\n    type: typeof FOLLOW\r\n    userId: number\r\n}\r\n\r\nexport const followSuccess = (userId: number): FollowSuccessActionType => ({type: FOLLOW, userId})\r\n\r\ntype UnfollowSuccessActionType = {\r\n    type: typeof UNFOLLOW\r\n    userId: number\r\n}\r\n\r\nexport const unfollowSuccess = (userId: number): UnfollowSuccessActionType => ({type: UNFOLLOW, userId})\r\n\r\ntype SetUsersActionType = {\r\n    type: typeof SET_USERS\r\n    users: Array<UserType>\r\n}\r\n\r\nexport const setUsers = (users: Array<UserType>): SetUsersActionType => ({type: SET_USERS, users})\r\n\r\ntype SetUsersCurrentPageActionType = {\r\n    type: typeof SET_USERS_CURRENT_PAGE\r\n    numberPage: number\r\n}\r\n\r\nexport const setUsersCurrentPage = (numberPage: number): SetUsersCurrentPageActionType => ({\r\n    type: SET_USERS_CURRENT_PAGE,\r\n    numberPage\r\n})\r\n\r\ntype SetTotalUsersCountActionType = {\r\n    type: typeof SET_TOTAL_USERS_COUNT,\r\n    totalUsersCount: number\r\n}\r\n\r\nexport const setTotalUsersCount = (totalUsersCount: number): SetTotalUsersCountActionType => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    totalUsersCount\r\n})\r\n\r\ntype SetPreloaderToggleActionType = {\r\n    type: typeof TOGGLE_PRELOADER,\r\n    preloader: boolean\r\n}\r\n\r\nexport const setPreloaderToggle = (preloader: boolean): SetPreloaderToggleActionType => ({\r\n    type: TOGGLE_PRELOADER,\r\n    preloader\r\n})\r\n\r\ntype ToggleFollowingProgressActionType = {\r\n    type: typeof TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    preloader: boolean,\r\n    userId: number\r\n}\r\n\r\nexport const toggleFollowingProgress = (preloader: boolean, userId: number): ToggleFollowingProgressActionType => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    preloader,\r\n    userId\r\n})\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(setPreloaderToggle(true))\r\n        let data = await usersAPI.getUsers(1, pageSize, true, '')\r\n        dispatch(setPreloaderToggle(false))\r\n        dispatch(setUsers(data.items))\r\n        dispatch(setTotalUsersCount(data.totalCount))\r\n    }\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleFollowingProgress(true, userId))\r\n        let data = await usersAPI.follow(userId)\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(followSuccess(userId))\r\n        }\r\n        dispatch(toggleFollowingProgress(false, userId))\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleFollowingProgress(true, userId))\r\n        let data = await usersAPI.unfollow(userId)\r\n        if (data.resultCode === 0) {\r\n            dispatch(unfollowSuccess(userId))\r\n        }\r\n        dispatch(toggleFollowingProgress(false, userId))\r\n    }\r\n}\r\n\r\nexport default friendsReducer;\r\n","import {Action, applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer from \"./profileReducer\";\r\nimport sideBarReducer from \"./sideBarReducer\";\r\nimport dialogsReducer from \"./dialogsReducer\";\r\nimport usersReducer from \"./usersReducer\";\r\nimport authReducer from \"./authReducer\";\r\nimport thunk, {ThunkAction} from \"redux-thunk\";\r\nimport appReducer from \"./appReducer\";\r\nimport friendsReducer from \"./friendsReducer\";\r\n\r\nlet rootReducers = combineReducers({\r\n    profileReducer: profileReducer,\r\n    dialogsReducer: dialogsReducer,\r\n    sideBarReducer: sideBarReducer,\r\n    usersReducer: usersReducer,\r\n    friendsReducer: friendsReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n})\r\n\r\n\r\ntype RootReducerType = typeof rootReducers\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nexport type InferActionTypes<T> = T extends {[keys: string]: (...args: any[])=> infer U} ? U : never\r\n\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\nconst store = createStore(rootReducers, applyMiddleware(thunk))\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\nexport default store","export default __webpack_public_path__ + \"static/media/user.affd02bf.png\";","import {NavLink} from \"react-router-dom\";\r\nimport s from \"./NavFriendItem.module.css\";\r\nimport userNull from '../../../../assets/images/user.png';\r\n\r\n\r\ntype PropsType = {\r\n    isPreloader: boolean\r\n    avatarUser: string | null\r\n    name: string\r\n    id: number\r\n}\r\n\r\nconst NavFriend: React.FC<PropsType> = (props) => {\r\n    return (<div>\r\n            {!props.isPreloader ? <NavLink to={`/profile/${props.id}`}\r\n                                           className={`${s.friendItem} ${props.isPreloader && s.friendItemPreloader}`}>\r\n                    <img src={props.avatarUser ? props.avatarUser : userNull}\r\n                         alt='avatar' className={s.avatarUser}/>\r\n                    <span className={s.name}>{props.name}</span>\r\n                </NavLink> :\r\n                <div className={s.friendItem}><img src={props.avatarUser ? props.avatarUser : userNull}\r\n                          alt='avatar' className={s.avatarUser}/>\r\n                    <span className={s.name}>{props.name}</span></div>}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default NavFriend;","import s from './FriendsSideBar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport NavFriend from \"./NavFriendItem/NavFriendItem\";\r\nimport {UserType} from \"../../../Types/types\";\r\n\r\ntype PropsType = {\r\n    nameUserElement: Array<UserType>\r\n    isPreloader: boolean\r\n}\r\n\r\nconst FriendsSideBar: React.FC<PropsType> = (props) => {\r\n    let nameUserElement = props.nameUserElement.map(user => <NavFriend name={user.name} avatarUser={user.photos.small}\r\n                                                                       key={user.id} id={user.id}\r\n                                                                       isPreloader={props.isPreloader}/>);\r\n\r\n    return (\r\n        <nav>\r\n            <NavLink to='/friends' className={s.buttonFriends}>\r\n                Friends\r\n            </NavLink>\r\n            <div className={s.blockFriends}>\r\n                {nameUserElement}\r\n            </div>\r\n\r\n        </nav>\r\n    )\r\n};\r\n\r\nexport default FriendsSideBar;","import FriendsSideBar from \"./FriendsSideBar\";\r\nimport {connect} from \"react-redux\";\r\nimport {UserType} from \"../../../Types/types\";\r\nimport {AppStateType} from \"../../../redux/reduxStore\";\r\n\r\ntype MapStatePropsType = {\r\n    nameUserElement: Array<UserType>\r\n    isPreloader: boolean\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return{\r\n        nameUserElement: state.sideBarReducer.users,\r\n        isPreloader: state.profileReducer.isPreloader\r\n    }\r\n}\r\n\r\nconst FriendsSideBarContainer = connect<MapStatePropsType, {}, {}, AppStateType>(mapStateToProps)(FriendsSideBar)\r\n\r\n\r\n\r\nexport default FriendsSideBarContainer;","import s from './NavBar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport FriendsSideBarContainer from \"./FriendsSideBar/FriendsSideBarContainer\";\r\n\r\nconst NavBar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={`${s.item} ${s.item_first}`}>\r\n                <NavLink to='/profile' activeClassName={s.active}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/dialog' activeClassName={s.active}>Message</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/news' activeClassName={s.active}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/music' activeClassName={s.active}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/users' activeClassName={s.active}>Users</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.item_setting}`}>\r\n                <NavLink to='/setting' activeClassName={s.active}>Setting</NavLink>\r\n            </div>\r\n            <FriendsSideBarContainer/>\r\n        </nav>\r\n    )\r\n};\r\n\r\nexport default NavBar;","import s from './News.module.css'\r\n\r\nconst News = () => {\r\n    return (\r\n        <div className={s.news}>\r\n            News\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News;","import s from './Music.module.css';\r\n\r\nconst Music = () => {\r\n    return (\r\n        <div className={s.music}>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music;","import s from './Setting.module.css'\r\n\r\nconst Setting = () => {\r\n    return (\r\n        <div className={s.setting}>\r\n            Setting\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Setting;","import React from \"react\";\r\nimport './PreloaderButton.css'\r\n\r\nlet PreloaderButton = (props) => {\r\n    return (<div className=\"lds-ellipsis\">\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n    </div>)\r\n}\r\n\r\nexport default PreloaderButton;","import React from 'react';\r\nimport s from './User.module.css'\r\nimport userNull from '../../../assets/images/user.png'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport PreloaderButton from \"../../common/Preloader/PreloaderButton/PreloaderButton\";\r\nimport {UserType} from \"../../../Types/types\";\r\n\r\n\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    authorizedUserId: number | null\r\n    followingInProgress: Array<number>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n}\r\n\r\nlet User: React.FC<PropsType> = ({user, ...props}) => {\r\n\r\n    return (\r\n        <div className={s.user}>\r\n            <div className={s.avatarBlock}>\r\n                <NavLink to={`/profile/${user.id}`}>\r\n                    <img className={s.avatarUser} src={user.photos.large != null ? user.photos.large : userNull}\r\n                         alt=\"avatar\"/>\r\n                </NavLink>\r\n                {props.authorizedUserId === user.id ? null : (user.followed\r\n                    ? <button disabled={props.followingInProgress.some(id => id === user.id)} onClick={() => {\r\n                        props.unfollow(user.id)\r\n                    }}\r\n                              className={s.buttonFollow}>\r\n                        {props.followingInProgress.some(id => id === user.id) ? <PreloaderButton/> : 'Unfollow'}\r\n                    </button>\r\n                    : <button disabled={props.followingInProgress.some(id => id === user.id)} onClick={() => {\r\n                        props.follow(user.id)\r\n                    }}\r\n                              className={s.buttonFollow}>\r\n                        {props.followingInProgress.some(id => id === user.id) ? <PreloaderButton/> : 'Follow'}\r\n                    </button>)}\r\n            </div>\r\n            <div className={s.profileUser}>\r\n                <div className={s.aboutUser}>\r\n                    <div className={s.nameUser}>{user.name}</div>\r\n                    <div className={s.bio}>{user.status}</div>\r\n                </div>\r\n                <div className={s.blockCountry}>\r\n                    <div className={s.countyUser}>country</div>\r\n                    <div className={s.cityUser}>city</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User","import React, {useState} from 'react';\r\nimport s from './Paginator.module.css'\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (p: number) => void\r\n    portionSize?: number\r\n}\r\n\r\nlet Paginator: React.FC<PropsType> = ({portionSize = 20, ...props}) => {\r\n\r\n    let pagesCount = Math.ceil(props.totalItemsCount / props.pageSize);\r\n\r\n    let pages: Array<number> = [];\r\n    let i = 1\r\n    for (i; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState<number>(Math.ceil(props.currentPage / portionSize))\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n\r\n    return (\r\n        <div>\r\n            <button disabled={portionNumber === 1 && true} className={s.buttonChangeList} onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}>Last\r\n            </button>\r\n            {pages.filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map(p => (\r\n                    <button key={p} onClick={() => props.onPageChanged(p)}\r\n                            className={`${s.numbersPage} ${props.currentPage === p && s.selectedPage}`}>\r\n                        {p}\r\n                    </button>\r\n                ))}\r\n            <button disabled={portionNumber === portionCount && true} className={s.buttonChangeList} onClick={() => {\r\n                setPortionNumber(portionNumber + 1)\r\n            }}>Next\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Paginator;","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required = (value:string) => {\r\n    if (value) {\r\n        return undefined\r\n    }\r\n    return 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength:number):FieldValidatorType => value => {\r\n    if (value && value.length > maxLength) {\r\n        return `Max length is ${maxLength} symbols`\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport const password: FieldValidatorType = value => {\r\n    const beginWithoutDigit = /^\\D.*$/\r\n    const withoutSpecialChars = /^[^-() /]*$/\r\n    const containsLetters = /^.*[a-zA-Z]+.*$/\r\n\r\n    if(beginWithoutDigit.test(value) && withoutSpecialChars.test(value) &&\r\n        containsLetters.test(value) && value.length >= 8) {\r\n        return undefined\r\n    }\r\n    return 'Error password'\r\n}\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport s from './SearchForm.module.css'\r\nimport {ErrorMessage, Field, Form, Formik} from \"formik\";\r\nimport {required} from \"../../../utils/Validators/validator\";\r\n\r\ntype PropsType = {\r\n}\r\n\r\nlet SearchForm: React.FC<PropsType> = () => {\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{ term: '' }}\r\n                validate={values => {}}\r\n                onSubmit={(values) => {}}\r\n            >\r\n                {({ isSubmitting }) => (\r\n                    <Form>\r\n                        <Field type=\"text\" name=\"term\" placeholder={'Search'} validate={required}/>\r\n                        <button type=\"submit\" disabled={isSubmitting}>\r\n                            Submit\r\n                        </button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchForm;","import React from 'react';\r\nimport s from './Users.module.css'\r\nimport User from \"./User/User\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport {UserType} from \"../../Types/types\";\r\nimport SearchForm from \"../common/SearchForm/SearchForm\";\r\n\r\n\r\ntype PropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (p: number) => void\r\n    portionSize?: number\r\n    usersData: Array<UserType>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    followingInProgress: Array<number>\r\n    authorizedUserId: number | null\r\n}\r\n\r\n\r\nlet Users: React.FC<PropsType> = (props) => {\r\n    let usersData = props.usersData.map(user => <User follow={props.follow} unfollow={props.unfollow}\r\n                                                      user={user} key={user.id}\r\n                                                      followingInProgress={props.followingInProgress}\r\n                                                      authorizedUserId={props.authorizedUserId}/>)\r\n\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize);\r\n\r\n    let pages = [];\r\n    let i = 1\r\n    for (i; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let handleChange = (e: any) => {\r\n        props.onPageChanged(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <select onChange={handleChange} value={props.currentPage} className={s.selectPage}>\r\n                {pages.map(p => (\r\n                    <option key={p} className={s.optionPage}>{p} </option>\r\n                ))}\r\n            </select>\r\n            <SearchForm/>\r\n            {usersData}\r\n            <Paginator totalItemsCount={props.totalUsersCount} pageSize={props.pageSize}\r\n                       currentPage={props.currentPage} onPageChanged={props.onPageChanged}/>\r\n        </div>)\r\n}\r\n\r\nexport default Users;","import React from \"react\";\r\nimport './Preloader.css'\r\n\r\nlet Preloader = (props) => {\r\n    return (<div className=\"lds-ring\" >\r\n        <div style={{height: `${props.height}`, width:`${props.width}`, borderWidth:`${props.borderWidth}`}}></div>\r\n        <div style={{height: `${props.height}`, width:`${props.width}`, borderWidth:`${props.borderWidth}`}}></div>\r\n        <div style={{height: `${props.height}`, width:`${props.width}`, borderWidth:`${props.borderWidth}`}}></div>\r\n        <div style={{height: `${props.height}`, width:`${props.width}`, borderWidth:`${props.borderWidth}`}}></div>\r\n    </div>)\r\n}\r\n\r\nexport default Preloader;","import React from 'react';\r\nimport s from './PreloaderUsers.module.css'\r\nimport Preloader from \"../../../common/Preloader/Preloader\";\r\n\r\nlet PreloaderUser = () => {\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <Preloader height={'500px'} width={'500px'} borderWidth={'40px'}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PreloaderUser;","import {AppStateType} from \"./reduxStore\";\r\n\r\nexport const usersData = (state: AppStateType) => {\r\n    return state.usersReducer.usersData\r\n}\r\n\r\nexport const pageSize = (state: AppStateType) => {\r\n    return state.usersReducer.pageSize\r\n}\r\n\r\nexport const totalUsersCount = (state: AppStateType) => {\r\n    return state.usersReducer.totalUsersCount\r\n}\r\n\r\nexport const currentPage = (state: AppStateType) => {\r\n    return state.usersReducer.currentPage\r\n}\r\n\r\nexport const isPreloader = (state: AppStateType) => {\r\n    return state.usersReducer.isPreloader\r\n}\r\n\r\nexport const followingInProgress = (state: AppStateType) => {\r\n    return state.usersReducer.followingInProgress\r\n}\r\n\r\nexport const authorizedUserId = (state: AppStateType) => {\r\n    return state.auth.id\r\n}","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    follow, getUsers,\r\n    setTotalUsersCount,\r\n    setUsersCurrentPage,\r\n    unfollow,\r\n} from \"../../redux/usersReducer\";\r\nimport Users from \"./Users\";\r\nimport PreloaderUsers from \"./User/PreloaderUsers/PreloaderUsers\";\r\nimport {UserType} from \"../../Types/types\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {\r\n    authorizedUserId,\r\n    currentPage,\r\n    followingInProgress,\r\n    isPreloader,\r\n    pageSize,\r\n    totalUsersCount,\r\n    usersData\r\n} from \"../../redux/usersSelectors\";\r\n\r\ntype MapStatePropsType = {\r\n    currentPage: number\r\n    pageSize: number\r\n    isPreloader: boolean\r\n    totalUsersCount: number\r\n    usersData: Array<UserType>\r\n    followingInProgress: Array<number>\r\n    authorizedUserId: number | null\r\n    portionSize?: number\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n    setUsersCurrentPage: (numberPage: number) => void\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nclass UserAPIComponent extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize);\r\n    }\r\n\r\n    onPageChanged = (numberPage: number) => {\r\n        this.props.setUsersCurrentPage(numberPage)\r\n        this.props.getUsers(numberPage, this.props.pageSize);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.props.isPreloader ?\r\n                    <PreloaderUsers/> : <Users follow={this.props.follow} unfollow={this.props.unfollow}\r\n                                               onPageChanged={this.onPageChanged}\r\n                                               currentPage={this.props.currentPage}\r\n                                               usersData={this.props.usersData}\r\n                                               totalUsersCount={this.props.totalUsersCount}\r\n                                               pageSize={this.props.pageSize}\r\n                                               followingInProgress={this.props.followingInProgress}\r\n                                               authorizedUserId={this.props.authorizedUserId}\r\n                    />}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        usersData: usersData(state),\r\n        pageSize: pageSize(state),\r\n        totalUsersCount: totalUsersCount(state),\r\n        currentPage: currentPage(state),\r\n        isPreloader: isPreloader(state),\r\n        followingInProgress: followingInProgress(state),\r\n        authorizedUserId: authorizedUserId(state),\r\n    }\r\n}\r\n\r\n\r\n//TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState\r\nconst UserContainer = connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps,\r\n    {\r\n        follow, unfollow,\r\n        setUsersCurrentPage, getUsers\r\n    })\r\n(UserAPIComponent);\r\n\r\nexport default UserContainer;","import s from \"./ProfileInfo.module.css\";\r\nimport React from \"react\";\r\nimport {ProfileType} from \"../../../Types/types\";\r\n\r\ntype PropsType = {\r\n    isOwner: boolean\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    addChangeAvatar: (file: any) => void\r\n    changeInfoButton: (profile: any) => void\r\n}\r\n\r\nconst ProfileData: React.FC<PropsType> = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            {!props.isOwner &&\r\n            <button onClick={props.changeInfoButton} className={s.editButton}>Change profile</button>}\r\n            <p>About Me: {props.profile && props.profile.aboutMe}</p>\r\n            <p>Ищешь работу: {props.profile && props.profile.lookingForAJob ? 'да' : 'нет'}</p>\r\n            {props.profile && props.profile.lookingForAJobDescription &&\r\n            <p>Описание работы: {props.profile.lookingForAJobDescription}</p>}\r\n            <p className={s.contacts}>Контакты</p>\r\n            {props.profile && props.profile.contacts.facebook &&\r\n            <p>Страница в facebook: {props.profile.contacts.facebook}</p>}\r\n            {props.profile && props.profile.contacts.website &&\r\n            <p>Мой веб-сайт: {props.profile.contacts.website}</p>}\r\n            {props.profile && props.profile.contacts.vk &&\r\n            <p>Страница ВКонтакте: {props.profile.contacts.vk}</p>}\r\n            {props.profile && props.profile.contacts.twitter &&\r\n            <p>Страница в twitter: {props.profile.contacts.twitter}</p>}\r\n            {props.profile && props.profile.contacts.instagram &&\r\n            <p>Страница в instagram: {props.profile.contacts.instagram}</p>}\r\n            {props.profile && props.profile.contacts.youtube &&\r\n            <p>Мой канал на youtube: {props.profile.contacts.youtube}</p>}\r\n            {props.profile && props.profile.contacts.github &&\r\n            <p>Мой репозиторий на github: {props.profile.contacts.github}</p>}\r\n            {props.profile && props.profile.contacts.mainLink &&\r\n            <p>Страница в mainLink: {props.profile.contacts.mainLink}</p>}\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nexport default ProfileData;","import s from \"./ProfileInfo.module.css\";\r\nimport React, {useState} from \"react\";\r\nimport {ContactsType, ProfileType} from \"../../../Types/types\";\r\nimport {Field, Form} from \"react-final-form\";\r\n\r\ntype PropsType = {\r\n    isOwner: boolean\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    addChangeAvatar: (file: any) => void\r\n    changeInfoButton: (profile: any) => void\r\n    changeProfile: (profile: any) => void\r\n}\r\n\r\nconst ProfileDataForm: React.FC<PropsType> = (props) => {\r\n\r\n    type valueType = {\r\n        aboutMe: string | null,\r\n        contacts: ContactsType,\r\n        lookingForAJob: boolean,\r\n        lookingForAJobDescription: string | null,\r\n        fullName: string,\r\n    }\r\n    let onSubmit = (value: valueType) => {\r\n        let profile = {...value, fullName: props.profile && props.profile.fullName, lookingForAJob: isChecked}\r\n        props.changeProfile(profile)\r\n    }\r\n\r\n    const [isChecked, setIsChecked] = useState<boolean | undefined>(props.profile?.lookingForAJob)\r\n\r\n    return (\r\n        <div>\r\n\r\n            <Form\r\n                onSubmit={onSubmit}\r\n                render={({handleSubmit}) => (\r\n                    <form action=\"\" onSubmit={handleSubmit}>\r\n                        <button className={s.editButton}>Save profile</button>\r\n                        <button onClick={props.changeInfoButton} className={s.editButton}>Don't save changes</button>\r\n                        <p>About Me:</p>\r\n                        <Field component={\"input\"} type={'text'} name={'aboutMe'}\r\n                               initialValue={props.profile?.aboutMe}\r\n                               className={s.form}/>\r\n                        <p>Ищешь работу:</p>\r\n                        <span className={s.checkbox} onClick={() => setIsChecked(!isChecked)}>\r\n                             <Field component={\"input\"} type=\"checkbox\" name={'lookingForAJob'} checked={isChecked}/>\r\n                             <span className={s.wrapper}>\r\n                                  <i className={s.check}></i>\r\n                             </span>\r\n                        </span>\r\n                        <p>Описание работы: </p>\r\n                        <Field component={\"input\"} type={'text'}\r\n                               name={'lookingForAJobDescription'}\r\n                               initialValue={props.profile?.lookingForAJobDescription}\r\n                               className={s.form}/>\r\n                        <p className={s.contacts}>Контакты</p>\r\n                        <p>Страница в facebook: </p>\r\n                        <Field component={'input'} type={'text'} name={'contacts.facebook'}\r\n                               initialValue={props.profile?.contacts.facebook}\r\n                               className={s.form}/>\r\n                        <p>Мой веб-сайт: </p>\r\n                        <Field component={'input'} type={'text'} name={'contacts.website'}\r\n                               initialValue={props.profile?.contacts.website}\r\n                               className={s.form}/>\r\n                        <p>Страница ВКонтакте: </p>\r\n                        <Field component={'input'} type={'text'} name={'contacts.vk'}\r\n                               initialValue={props.profile?.contacts.vk}\r\n                               className={s.form}/>\r\n                        <p>Страница в twitter: </p>\r\n                        <Field component={'input'} type={'text'} name={'contacts.twitter'}\r\n                               initialValue={props.profile?.contacts.twitter}\r\n                               className={s.form}/>\r\n                        <p>Страница в instagram:</p>\r\n                        <Field component={'input'} type={'text'} name={'contacts.instagram'}\r\n                               initialValue={props.profile?.contacts.instagram}\r\n                               className={s.form}/>\r\n                        <p>Мой канал на youtube: </p>\r\n                        <Field component={'input'} type={'text'} name={'contacts.youtube'}\r\n                               initialValue={props.profile?.contacts.youtube}\r\n                               className={s.form}/>\r\n                        <p>Мой репозиторий на github: </p>\r\n                        <Field component={'input'} type={'text'}\r\n                               name={'contacts.github'}\r\n                               initialValue={props.profile?.contacts.github}\r\n                               className={s.form}/>\r\n                        <p>Страница в mainLink: </p>\r\n                        <Field component={'input'} type={'text'} name={'contacts.mainLink'}\r\n                               initialValue={props.profile?.contacts.mainLink}\r\n                               className={s.form}/>\r\n\r\n                    </form>\r\n                )}\r\n            />\r\n        </div>\r\n\r\n    )\r\n\r\n};\r\n\r\nexport default ProfileDataForm;","import s from './AvavatarProfile.module.css'\r\nimport avatarUser from \"../../../../assets/images/user.png\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faUserEdit} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {ChangeEvent} from \"react\";\r\n\r\n\r\ntype PropsType = {\r\n    isOwner: boolean\r\n    photo:  string | null\r\n    addChangeAvatar: (file:any) => void\r\n}\r\n\r\n\r\nconst AvatarProfile: React.FC<PropsType> = (props) => {\r\n\r\n    let onChangeAvatarMe = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length)\r\n            props.addChangeAvatar(e.target.files[0])\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <img className={s.avatar}\r\n                 src={props.photo != null ? props.photo : avatarUser}/>\r\n            {!props.isOwner && <div className={s.blockInput}>\r\n                <input type={\"file\"} onChange={onChangeAvatarMe} id={'avatar'} className={s.inputPhoto}/>\r\n                <label htmlFor=\"avatar\" className={s.fakeInputPhoto}>\r\n                    <div className={s.blockFakeInputPhoto}>\r\n                        <FontAwesomeIcon icon={faUserEdit} className={s.iconFakeInputPhoto}/>\r\n                    </div>\r\n                </label>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AvatarProfile;","import React, {ChangeEvent, useEffect, useState} from 'react'\r\nimport './StatusProfile.css'\r\nimport {updateUserStatus} from \"../../../../redux/profileReducer\";\r\n\r\ntype PropsType = {\r\n    isOwner: boolean\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\n\r\nlet StatusProfileWithHook: React.FC<PropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState<boolean>(false);\r\n    let [status, setStatus] = useState<string>(props.status)\r\n\r\n    let activeEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    let removeEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateUserStatus(status)\r\n    }\r\n\r\n    let onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.target.value)\r\n    }\r\n\r\n    useEffect(() => {\r\n            setStatus(props.status)\r\n        }, [props.status]\r\n    )\r\n\r\n    return (\r\n        <div>\r\n            {!props.isOwner ? (!editMode ? <div onDoubleClick={activeEditMode} className='StatusProfile_status'>\r\n                    {status ? status : 'Введите статус'}\r\n                </div> :\r\n                <div className='StatusProfile_inputBlock'><input autoFocus={true}\r\n                                                                 onChange={onStatusChange} value={status}\r\n                                                                 type=\"text\" className='StatusProfile_input'/>\r\n                    <button onClick={removeEditMode} className='StatusProfile_inputButton'>\r\n                        <i className='check'></i>\r\n                    </button>\r\n                </div>) : <div className='StatusProfile_status'>{status ? status :'Статус не введён'}</div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StatusProfileWithHook;","import React, {useState} from \"react\";\r\nimport {ProfileType} from \"../../../Types/types\";\r\nimport ProfileData from \"./ProfileData\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport AvatarProfile from \"./AvavatarProfile/AvatarProfile\";\r\nimport StatusProfileWithHook from \"./StatusProfile/StatusProfileWithHook\";\r\n\r\n\r\ntype PropsType = {\r\n    isOwner: boolean\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    addChangeAvatar: (file: any) => void\r\n    changeProfile: (profile: any) => void\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <img className={s.profile_logo}\r\n                 src=\"https://www.komandirovka.ru/upload/save_file33/bf5/bf5c6f100d3d620c48787b3714cb4fea.jpg\" alt=\"\"/>\r\n            <div className={s.descriptions}>\r\n                <div className={s.descriptions_logo}>\r\n                    <AvatarProfile isOwner={props.isOwner} photo={props.profile && props.profile.photos.large}\r\n                                   addChangeAvatar={props.addChangeAvatar}/>\r\n                </div>\r\n                <div className={s.descriptions_text}>\r\n                    <div className={s.descriptions_name}>\r\n                        {props.profile && props.profile.fullName}\r\n                    </div>\r\n                    <StatusProfileWithHook isOwner={props.isOwner} status={props.status}\r\n                                           updateUserStatus={props.updateUserStatus}/>\r\n\r\n                    <div className={s.descriptions_about}>\r\n                        {!editMode ? <ProfileData {...props} changeInfoButton={() => setEditMode(true)}/> :\r\n                            <ProfileDataForm {...props} changeProfile={props.changeProfile} changeInfoButton={() => setEditMode(false)}/>}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nexport default ProfileInfo;","import s from './Post.module.css';\r\nimport avatarUser from '../../../../assets/images/user.png'\r\nimport React from \"react\";\r\n\r\ntype PropsType = {\r\n    photos: string | null\r\n    message: string\r\n    id: number\r\n    likes: number\r\n    deletePost: (id: number) => void\r\n}\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n        return (\r\n        <div className={s.post}>\r\n            <div className={s.post_content}>\r\n                <img className={s.post_logo}\r\n                     src={props.photos ? props.photos : avatarUser}\r\n                     alt=\"avatar\"/>\r\n                <p className={s.post_text}>{props.message}</p>\r\n                <span onClick={() => {props.deletePost(props.id)}} className={s.delete}></span>\r\n            </div>\r\n            <button id='button' className={s.post_like}>\r\n                like\r\n            </button>\r\n            <div className={s.post_likes} id='like'>\r\n                {props.likes}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Post;","import s from './NewPost.module.css'\r\nimport {Field, Form} from \"react-final-form\";\r\nimport {maxLengthCreator, required} from \"../../../../utils/Validators/validator\";\r\nimport {Textarea} from \"../../../common/FormsControls/FormsControls\";\r\n\r\ntype PropsType = {\r\n    addPost:(newPostText: string) => void\r\n}\r\n\r\nconst AddNewPost: React.FC<PropsType> = (props) => {\r\n    let addNewPost = (values: {inputNewPost: string}) => {\r\n        props.addPost(values.inputNewPost)\r\n    }\r\n\r\n    const composeValidators = (...validators:any[]) => (value:any) =>\r\n        validators.reduce((error, validator) => error || validator(value), undefined)\r\n\r\n    return (\r\n        <Form onSubmit={addNewPost}>\r\n            {props => (\r\n                <form onSubmit={props.handleSubmit} className={s.newPost}>\r\n                    <Field component={Textarea} name='inputNewPost' className={s.newPost_textarea}\r\n                           placeholder='Введите текст нового поста'\r\n                           validate={composeValidators(required, maxLengthCreator(10))}/>\r\n                    <button disabled={props.hasValidationErrors && true} className={`${s.newPost_button} \r\n                    ${props.hasValidationErrors && s.disabled}`}>Send\r\n                    </button>\r\n                </form>\r\n            )}\r\n        </Form>\r\n    )\r\n}\r\n\r\nconst NewPost: React.FC<PropsType> = (props) => {\r\n    return <AddNewPost addPost={props.addPost}/>\r\n}\r\n\r\n\r\nexport default NewPost;","import {addPost} from \"../../../../redux/profileReducer\";\r\nimport NewPost from \"./NewPost\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../../redux/reduxStore\";\r\n\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost:(newPostText: string) => void\r\n}\r\n\r\nconst NewPostContainer = connect<{}, MapDispatchPropsType, {}, AppStateType>(null, {addPost})(NewPost);\r\n\r\nexport default NewPostContainer;","import s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport NewPostContainer from \"./NewPost/NewPostContainer\";\r\nimport {PostDataType} from \"../../../Types/types\";\r\nimport React from \"react\";\r\n\r\n\r\ntype PropsType = {\r\n    postData: Array<PostDataType>\r\n    photos: string | null\r\n    deletePost: (id: number) => void\r\n}\r\n\r\nconst MyPosts: React.FC<PropsType> = (props) => {\r\n    let postsElement = props.postData.map(post => <Post message={post.message} likes={post.likesCount}\r\n                                                        photos={props.photos} key={post.id} id={post.id}\r\n                                                        deletePost={props.deletePost}/>)\r\n\r\n    return (\r\n        <div className={s.posts}>\r\n            <div className={s.posts_title}>\r\n                My Posts\r\n            </div>\r\n            <NewPostContainer/>\r\n            {postsElement}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MyPostMemorized = React.memo(MyPosts)\r\n\r\nexport default MyPostMemorized;","import s from './Profile.module.css';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPosts from \"./MyPosts/MyPosts\";\r\nimport PreloaderUser from \"../Users/User/PreloaderUsers/PreloaderUsers\";\r\nimport {PostDataType, ProfileType} from \"../../Types/types\";\r\n\r\ntype PropsType = {\r\n    isOwner: boolean\r\n    profile:  ProfileType | null\r\n    status: string\r\n    updateUserStatus: (status:string) => void\r\n    addChangeAvatar: (file:any) => void\r\n    postData: Array<PostDataType>\r\n    deletePost: (id: number) => void\r\n    changeProfile: (profile: any) => void\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n    if (!props.profile) {\r\n        return (\r\n            <div className={s.preloaderBox}>\r\n                <PreloaderUser/>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div className={s.profile}>\r\n            <ProfileInfo isOwner={props.isOwner} profile={props.profile} status={props.status}\r\n                         updateUserStatus={props.updateUserStatus} addChangeAvatar={props.addChangeAvatar} changeProfile={props.changeProfile}/>\r\n            <MyPosts photos={props.profile.photos.small} postData={props.postData} deletePost={props.deletePost}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport Profile from \"./Profile\";\r\nimport {\r\n    addChangeAvatar, deletePost,\r\n    getUserProfile,\r\n    getUserStatus,\r\n    updateUserStatus,\r\n    changeProfile\r\n} from \"../../redux/profileReducer\";\r\nimport {Redirect, RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport Error404 from \"../common/Error404/Error404\";\r\nimport {PostDataType, ProfileType} from \"../../Types/types\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\ntype MapStatePropsType = {\r\n    authorizedUserId: null | number,\r\n    profile: ProfileType | null,\r\n    postData: Array<PostDataType>,\r\n    status: string\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getUserStatus: (userId: number) => void\r\n    updateUserStatus: (status: string) => void\r\n    addChangeAvatar: (file: File) => void\r\n    deletePost: (id: number) => void\r\n    changeProfile: (profile: any) => void\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype OwnProps = {\r\n    match: any\r\n    history: any\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & RouteComponentProps<PathParamsType>\r\n\r\nclass ProfileContainerAPI extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n       if (userId) {\r\n            this.props.getUserProfile(userId);\r\n            this.props.getUserStatus(userId)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n       this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps :PropsType) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if(Number(this.props.match.params.userId) === this.props.authorizedUserId) {\r\n            return <Redirect to={'/profile'}/>\r\n        }\r\n\r\n        // if(typeof this.props.profile === 'string') {\r\n        //    return <Error404/>\r\n        // }\r\n\r\n        return (\r\n            <Profile isOwner = {!!this.props.match.params.userId} {...this.props} />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) : MapStatePropsType => {\r\n    return {\r\n        profile: state.profileReducer.profile,\r\n        postData: state.profileReducer.postData,\r\n        status: state.profileReducer.status,\r\n        authorizedUserId: state.auth.id,\r\n    }\r\n}\r\n\r\n\r\nconst ProfileContainer = compose<React.ComponentType>(\r\n    connect<MapStatePropsType, MapDispatchPropsType, OwnProps, AppStateType>(mapStateToProps, {\r\n        getUserProfile,\r\n        getUserStatus,\r\n        updateUserStatus,\r\n        addChangeAvatar,\r\n        deletePost,\r\n        changeProfile\r\n    }),\r\n    withRouter,\r\n)(ProfileContainerAPI)\r\n\r\n// const WithUrlDataContainerComponent = withRouter(ProfileContainer)\r\n//\r\n// export default withAuthRedirect(connect(mapStateToProps, {getUserProfile})(WithUrlDataContainerComponent));\r\n\r\nexport default ProfileContainer\r\n\r\n","import s from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport userNull from '../../../src/assets/images/user.png';\r\n\r\ntype PropsType = {\r\n    isAuth: boolean\r\n    userPhoto: string | null\r\n    login: string | null\r\n    logout: () => void\r\n}\r\n\r\nconst Header: React.FC<PropsType> = (props) => {\r\n\r\n    return (\r\n        <header className={s.header}>\r\n            <div className={s.header_logo}>RUSLNETWORK</div>\r\n            {props.isAuth ?\r\n                <NavLink to='/profile' className={s.loginBlock}>\r\n                    <span>\r\n                        <div className={s.blockPhoto}>\r\n                            {props.userPhoto ? <img src={props.userPhoto} alt=\"\" className={s.photo}/> :\r\n                                <img src={userNull} alt=\"\" className={s.photoNull}/>}\r\n                        </div>\r\n                    </span>\r\n                    <span>{props.login}</span>\r\n                    <button onClick={props.logout} className={s.buttonLogout}>Logout</button>\r\n                </NavLink>\r\n\r\n                : <NavLink to='/login' className={s.loginBlock} activeClassName={s.active}>\r\n                    Login\r\n                </NavLink>\r\n            }\r\n        </header>\r\n    )\r\n};\r\n\r\nexport default Header;","import React from 'react'\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/authReducer\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    userPhoto: string | null\r\n    login: string | null\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    logout: () => void\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nclass HeaderComponent extends React.Component<PropsType> {\r\n\r\n    render() {\r\n        return (<Header {...this.props}/>)\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        login: state.auth.login,\r\n        isAuth: state.auth.isAuth,\r\n        userPhoto: state.auth.userPhoto,\r\n    }\r\n}\r\n\r\n\r\nexport default connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {logout})(HeaderComponent);","import s from './InputMessage.module.css';\r\nimport {Field, Form} from \"react-final-form\";\r\n\r\ntype PropsType = {\r\n    addNewMessage: (message:string) => void\r\n}\r\n\r\nconst AddMessageForm: React.FC<PropsType> = (props) => {\r\n    let addNewMessage = (formData: { textAreaMessage: string }) => {\r\n        props.addNewMessage(formData.textAreaMessage)\r\n    }\r\n\r\n    return (\r\n        <Form onSubmit={addNewMessage}\r\n              render={({handleSubmit, form}) => (\r\n                  <form onSubmit={handleSubmit} className={s.inputMessage}>\r\n                      <Field component='textarea' placeholder='Введите новое сообщение'\r\n                             name='textAreaMessage' className={s.textMessage}/>\r\n                      <button className={s.buttonSend}>\r\n                          <img className={s.buttonImg} src=\"https://img.icons8.com/plumpy/96/000000/filled-sent.png\"\r\n                               alt=\"\"/>\r\n                      </button>\r\n                  </form>\r\n              )}\r\n        />\r\n    )\r\n}\r\n\r\n\r\nconst InputMessage: React.FC<PropsType> = (props) => {\r\n    return <AddMessageForm addNewMessage={props.addNewMessage}/>\r\n};\r\n\r\n\r\nexport default InputMessage;","import s from './Message.module.css';\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.message}>\r\n            <div className={s.messageInto}>\r\n                {props.message}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Message;","import s from './BlockMessage.module.css';\r\nimport Message from \"./Message/Message\";\r\nimport {MessageType} from \"../../../Types/types\";\r\n\r\ntype PropsType = {\r\n    messageElement: Array<MessageType>\r\n}\r\n\r\nconst BlockMessage: React.FC<PropsType> = (props) => {\r\n\r\n\r\n    let messageElement = props.messageElement.map(message => <Message key={message.id} message={message.message}/>)\r\n\r\n    return (\r\n            <div className={s.blockMessage}>\r\n                {messageElement}\r\n            </div>\r\n    )\r\n};\r\n\r\nexport default BlockMessage;","import s from './DialogsItem.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    id: number\r\n    avatarUser: string\r\n    name: string\r\n}\r\n\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n\r\n    let path = '/dialog/' + props.id;\r\n\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={path} activeClassName={s.active}>\r\n                <img className={s.avatarUser} src={props.avatarUser} alt='avatar'/>\r\n                <span className={s.nameUser}>\r\n                    {props.name}\r\n                </span>\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;\r\n","import s from './BlockDialogsItem.module.css';\r\nimport DialogItem from \"./DialogItem/DialogsItem\";\r\nimport {DialogType} from \"../../../Types/types\";\r\n\r\ntype PropsType = {\r\n    dialogElement: Array<DialogType>\r\n}\r\n\r\nconst BlockDialogsItem: React.FC<PropsType> = (props) => {\r\n\r\n    let dialogElement = props.dialogElement.map(dialog => <DialogItem name={dialog.name} id={dialog.id} key={dialog.id}\r\n                                                                          avatarUser={dialog.avatarUser}/>)\r\n\r\n    return (\r\n\r\n            <div className={s.dialogs_items}>\r\n                {dialogElement}\r\n            </div>\r\n    )\r\n};\r\n\r\nexport default BlockDialogsItem;","import s from './Dialogs.module.css';\r\nimport InputMessage from \"./InputMessage/InputMessage\";\r\nimport BlockMessage from \"./BlockMessage/BlockMessage\";\r\nimport BlockDialogsItem from \"./BlockDialogsItem/BlockDialogsItem\";\r\nimport {DialogType, MessageType} from \"../../Types/types\";\r\n\r\ntype PropsType = {\r\n    addNewMessage: (message:string) => void\r\n    messageElement: Array<MessageType>\r\n    dialogElement: Array<DialogType>\r\n}\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <BlockDialogsItem dialogElement={props.dialogElement}/>\r\n            <div className={s.messages}>\r\n                <BlockMessage  messageElement={props.messageElement}/>\r\n                <InputMessage addNewMessage={props.addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Dialogs;","import {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/reduxStore\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nfunction withAuthRedirect<WCP>(Component: React.ComponentType<WCP>) {\r\n\r\n\r\n    let RedirectComponent = (props: MapStatePropsType) => {\r\n\r\n        let {isAuth, ...restProps} = props\r\n\r\n\r\n        if (!isAuth) {\r\n            return <Redirect to='login'/>\r\n        }\r\n\r\n        return <Component {...restProps as unknown as WCP}/>\r\n    }\r\n\r\n    return connect<MapStatePropsType, {}, WCP, AppStateType>(mapStateToProps)(RedirectComponent);\r\n}\r\n\r\nexport default withAuthRedirect;","import Dialogs from \"./Dialogs\";\r\nimport withAuthRedirect from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {addNewMessage} from \"../../redux/dialogsReducer\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {DialogType, MessageType} from \"../../Types/types\";\r\n\r\n\r\ntype MapDispatchPropsType = {\r\n    addNewMessage: (message:string) => void\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    messageElement: Array<MessageType>\r\n    dialogElement: Array<DialogType>\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        messageElement: state.dialogsReducer.messageData,\r\n        dialogElement: state.dialogsReducer.dialogsData,\r\n    }\r\n}\r\n\r\nconst DialogsContainer = compose<React.ComponentType>(withAuthRedirect,\r\n    connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {addNewMessage}))(Dialogs)\r\n\r\nexport default DialogsContainer;","import React from 'react'\r\nimport Preloader from \"../components/common/Preloader/Preloader\";\r\n\r\nfunction WithSuspense <WCP>(Component: React.ComponentType<WCP>) {\r\n\r\n    const ComponentHOC = (props: WCP) => {\r\n        return <React.Suspense fallback={<div className={'preloaderSuspense'}>\r\n            <Preloader height={'500px'}\r\n                       width={'500px'} borderWidth={'40px'}/>\r\n        </div>}>\r\n            <Component {...props}/>\r\n        </React.Suspense>\r\n    }\r\n\r\n    return ComponentHOC\r\n}\r\n\r\nexport default WithSuspense;","export default __webpack_public_path__ + \"static/media/error_404.83d95d70.png\";","import error404 from \"../../../assets/images/error_404.png\";\r\nimport s from \"./Error404.module.css\"\r\nimport React from \"react\";\r\n\r\nconst Error404 = (props) => {\r\n    return (<div>\r\n            <img src={error404} className={s.imagesError}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Error404;","import React from 'react';\r\nimport s from './User.module.css'\r\nimport userNull from '../../../assets/images/user.png'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport PreloaderButton from \"../../common/Preloader/PreloaderButton/PreloaderButton\";\r\nimport {UserType} from \"../../../Types/types\";\r\n\r\n\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    authorizedUserId: number | null\r\n    followingInProgress: Array<number>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n}\r\n\r\nlet User: React.FC<PropsType> = ({user, ...props}) => {\r\n\r\n    return (\r\n        <div className={s.user}>\r\n            <div className={s.avatarBlock}>\r\n                <NavLink to={`/profile/${user.id}`}>\r\n                    <img className={s.avatarUser} src={user.photos.large != null ? user.photos.large : userNull}\r\n                         alt=\"avatar\"/>\r\n                </NavLink>\r\n                {props.authorizedUserId === user.id ? null : (user.followed\r\n                    ? <button disabled={props.followingInProgress.some(id => id === user.id)} onClick={() => {\r\n                        props.unfollow(user.id)\r\n                    }}\r\n                              className={s.buttonFollow}>\r\n                        {props.followingInProgress.some(id => id === user.id) ? <PreloaderButton/> : 'Unfollow'}\r\n                    </button>\r\n                    : <button disabled={props.followingInProgress.some(id => id === user.id)} onClick={() => {\r\n                        props.follow(user.id)\r\n                    }}\r\n                              className={s.buttonFollow}>\r\n                        {props.followingInProgress.some(id => id === user.id) ? <PreloaderButton/> : 'Follow'}\r\n                    </button>)}\r\n            </div>\r\n            <div className={s.profileUser}>\r\n                <div className={s.aboutUser}>\r\n                    <div className={s.nameUser}>{user.name}</div>\r\n                    <div className={s.bio}>{user.status}</div>\r\n                </div>\r\n                <div className={s.blockCountry}>\r\n                    <div className={s.countyUser}>country</div>\r\n                    <div className={s.cityUser}>city</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User","import React from 'react';\r\nimport s from './Friends.module.css'\r\nimport User from \"./User/User\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport {UserType} from \"../../Types/types\";\r\n\r\n\r\ntype PropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (p: number) => void\r\n    portionSize?: number\r\n    usersData: Array<UserType>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    followingInProgress: Array<number>\r\n    authorizedUserId: number | null\r\n}\r\n\r\n\r\nlet Friends: React.FC<PropsType> = (props) => {\r\n    let usersData = props.usersData.map(user => <User follow={props.follow} unfollow={props.unfollow}\r\n                                                      user={user} key={user.id}\r\n                                                      followingInProgress={props.followingInProgress}\r\n                                                      authorizedUserId={props.authorizedUserId}/>)\r\n\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize);\r\n\r\n    let pages = [];\r\n    let i = 1\r\n    for (i; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let handleChange = (e: any) => {\r\n        props.onPageChanged(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <select onChange={handleChange} value={props.currentPage} className={s.selectPage}>\r\n                {pages.map(p => (\r\n                    <option key={p} className={s.optionPage}>{p} </option>\r\n                ))}\r\n            </select>\r\n            {usersData}\r\n            <Paginator totalItemsCount={props.totalUsersCount} pageSize={props.pageSize}\r\n                       currentPage={props.currentPage} onPageChanged={props.onPageChanged}/>\r\n        </div>)\r\n}\r\n\r\nexport default Friends;","import React from 'react';\r\nimport s from './PreloaderUsers.module.css'\r\nimport Preloader from \"../../../common/Preloader/Preloader\";\r\n\r\nlet PreloaderUser = () => {\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <Preloader height={'500px'} width={'500px'} borderWidth={'40px'}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PreloaderUser;","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    follow, getUsers,\r\n    setTotalUsersCount,\r\n    setUsersCurrentPage,\r\n    unfollow,\r\n} from \"../../redux/friendsReducer\";\r\nimport Friends from \"./Friends\";\r\nimport PreloaderUsers from \"./User/PreloaderUsers/PreloaderUsers\";\r\nimport {UserType} from \"../../Types/types\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {\r\n    authorizedUserId,\r\n    currentPage,\r\n    followingInProgress,\r\n    isPreloader,\r\n    pageSize,\r\n    totalUsersCount,\r\n    usersData\r\n} from \"../../redux/usersSelectors\";\r\n\r\ntype MapStatePropsType = {\r\n    currentPage: number\r\n    pageSize: number\r\n    isPreloader: boolean\r\n    totalUsersCount: number\r\n    usersData: Array<UserType>\r\n    followingInProgress: Array<number>\r\n    authorizedUserId: number | null\r\n    portionSize?: number\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n    setUsersCurrentPage: (numberPage: number) => void\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nclass UserAPIComponent extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize);\r\n    }\r\n\r\n    onPageChanged = (numberPage: number) => {\r\n        this.props.setUsersCurrentPage(numberPage)\r\n        this.props.getUsers(numberPage, this.props.pageSize);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.props.isPreloader ?\r\n                    <PreloaderUsers/> : <Friends follow={this.props.follow} unfollow={this.props.unfollow}\r\n                                                 onPageChanged={this.onPageChanged}\r\n                                                 currentPage={this.props.currentPage}\r\n                                                 usersData={this.props.usersData}\r\n                                                 totalUsersCount={this.props.totalUsersCount}\r\n                                                 pageSize={this.props.pageSize}\r\n                                                 followingInProgress={this.props.followingInProgress}\r\n                                                 authorizedUserId={this.props.authorizedUserId}\r\n                    />}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        usersData: usersData(state),\r\n        pageSize: pageSize(state),\r\n        totalUsersCount: totalUsersCount(state),\r\n        currentPage: currentPage(state),\r\n        isPreloader: isPreloader(state),\r\n        followingInProgress: followingInProgress(state),\r\n        authorizedUserId: authorizedUserId(state),\r\n    }\r\n}\r\n\r\n\r\n//TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState\r\nconst FriendsContainer = connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps,\r\n    {\r\n        follow, unfollow,\r\n        setUsersCurrentPage, getUsers\r\n    })\r\n(UserAPIComponent);\r\n\r\nexport default FriendsContainer;","import React from 'react'\nimport {BrowserRouter, HashRouter, Redirect, Route, Switch} from \"react-router-dom\";\nimport './App.css';\nimport NavBar from \"./components/NavBar/NavBar\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport Setting from \"./components/Setting/Setting\";\nimport UsersContainer from \"./components/Users/UsersContainre\";\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\nimport HeaderComponent from \"./components/Header/HeaderComponent\";\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\nimport {connect} from \"react-redux\";\nimport {initializeApp} from \"./redux/appReducer\";\nimport Preloader from \"./components/common/Preloader/Preloader\";\nimport WithSuspense from \"./hoc/withSuspense\";\nimport Error404 from \"./components/common/Error404/Error404\";\nimport {AppStateType} from \"./redux/reduxStore\";\nimport FriendsContainer from \"./components/Friends/FriendsContainre\";\n\nconst Login = React.lazy(() => import(\"./components/Login/Login\"));\n\ntype MapStatePropsType = {\n    id: number | null\n    initialize: boolean\n}\n\ntype MapDispatchPropsType = {\n    initializeApp: () => void\n}\n\ntype PropsType = MapStatePropsType & MapDispatchPropsType\n\nclass App extends React.Component<PropsType> {\n\n    componentDidMount() {\n        this.props.initializeApp()\n    }\n\n    render() {\n        if (!this.props.initialize) {\n            return <div className='preloader'>\n                <Preloader height={'500px'} width={'500px'} borderWidth={'40px'}/>\n            </div>\n        }\n\n        return (\n            <HashRouter>\n                <div className='app-wrapper'>\n                    <HeaderComponent/>\n                    <NavBar/>\n                    <div className='app-content'>\n                        <Switch>\n                            <Route exact path='/' render={() => <Redirect to='/profile'/>}/>\n                            <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\n                            <Route path='/dialog' render={() => <DialogsContainer/>}/>\n                            <Route path='/news' render={() => <News/>}/>\n                            <Route path='/music' render={() => <Music/>}/>\n                            <Route path='/setting' render={() => <Setting/>}/>\n                            <Route path='/friends' render={() => <FriendsContainer/>}/>\n                            <Route path='/users' render={() => <UsersContainer/>}/>\n                            <Route path='/login' render={WithSuspense(Login)}/>\n                            <Route path='*' render={() => <Error404/>}/>\n                        </Switch>\n                    </div>\n                </div>\n            </HashRouter>\n        );\n    }\n}\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\n    return {\n        id: state.auth.id,\n        initialize: state.app.initialized,\n    }\n}\n\nexport default connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {initializeApp})(App);","import React from 'react';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\nimport store from \"./redux/reduxStore\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport {Provider} from \"react-redux\";\n\n\nReactDOM.render(\n\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}